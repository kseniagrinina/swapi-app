{"version":3,"sources":["components/Movie.js","components/MoviesList.js","App.js","index.js","components/Movie.module.css","components/MoviesList.module.css"],"names":["Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","key","id","App","useState","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","useCallback","a","fetch","response","ok","Error","json","data","transformedMovies","results","movieData","episode_id","release_date","opening_crawl","message","useEffect","content","length","MoviesList","Fragment","onClick","ReactDOM","createRoot","document","getElementById","render","module","exports"],"mappings":"sRAceA,EAVD,SAACC,GACb,OACE,wBAAIC,UAAWC,IAAQC,OACrB,4BAAKH,EAAMI,OACX,4BAAKJ,EAAMK,aACX,2BAAIL,EAAMM,e,gBCWDC,EAfG,SAACP,GACjB,OACE,wBAAIC,UAAWC,IAAQ,gBACpBF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,kBAAC,EAAD,CACEO,IAAKP,EAAMQ,GACXP,MAAOD,EAAMC,MACbC,YAAaF,EAAME,YACnBC,YAAaH,EAAMG,mB,MC2DdM,MAlEf,WACE,MAA4BC,mBAAS,IAArC,mBAAOL,EAAP,KAAeM,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEMC,EAAqBC,sBAAW,sBAAC,gCAAAC,EAAA,6DACrCL,GAAa,GACbE,EAAS,MAF4B,kBAIZI,MAAM,gCAJM,WAI7BC,EAJ6B,QAKrBC,GALqB,sBAM3B,IAAIC,MAAM,yBANiB,wBAShBF,EAASG,OATO,QAS7BC,EAT6B,OAW7BC,EAAoBD,EAAKE,QAAQpB,KAAI,SAACqB,GAC1C,MAAO,CACLnB,GAAImB,EAAUC,WACd3B,MAAO0B,EAAU1B,MACjBC,YAAayB,EAAUE,aACvB1B,YAAawB,EAAUG,kBAG3BnB,EAAUc,GAnByB,kDAqBnCV,EAAS,KAAMgB,SArBoB,QAuBrClB,GAAa,GAvBwB,0DAwBpC,IAEHmB,qBAAU,WACRhB,MACC,CAACA,IAMJ,IAAIiB,EAAU,+CAcd,OAZI5B,EAAO6B,OAAS,IAClBD,EAAU,kBAACE,EAAD,CAAY9B,OAAQA,KAG5BS,IACFmB,EAAU,2BAAInB,IAGZF,IACFqB,EAAU,0CAIV,kBAAC,IAAMG,SAAP,KAIE,iCACE,4BAAQC,QAASrB,GAAjB,iBAEF,iCAAUiB,KC7DHK,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,kBAAC,EAAD,Q,kBCNZC,EAAOC,QAAU,CAAC,MAAQ,uB,kBCA1BD,EAAOC,QAAU,CAAC,cAAc,kC","file":"static/js/main.941861a6.chunk.js","sourcesContent":["import React from \"react\";\n\nimport classes from \"./Movie.module.css\";\n\nconst Movie = (props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from \"react\";\n\nimport Movie from \"./Movie\";\nimport classes from \"./MoviesList.module.css\";\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes[\"movies-list\"]}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.releaseDate}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\n// import AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      if (!response.ok) {\n        throw new Error(\"Something went wrong.\");\n      }\n\n      const data = await response.json();\n\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          releaseDate: movieData.release_date,\n          openingText: movieData.opening_crawl,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  // function addMovieHandler(movie) {\n  //   console.log(movie);\n  // }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      {/* <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section> */}\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__27rBX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__lMnXQ\"};"],"sourceRoot":""}